let MalumMachine = (/** @type {Registry.Item} */ event) => {
	event.create('auto_void', 'multiblock')
		.rotationState(RotationState.NON_Y_AXIS)
		.recipeType('auto_void')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
		.appearanceBlock(() => Block.getBlock('gtceu:atomic_casing'))
		.pattern(definition => FactoryBlockPattern.start()
			.aisle('AABBBAA', 'I     I', 'I     I', 'I     I', 'I     I', 'I     I', 'I     I', 'AABBBAA', 'I     I', 'I     I', 'I     I', 'AABBBAA')
			.aisle('ACCCCCA', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', 'ADDDDDA', '       ', '       ', '       ', 'ACCCCCA')
			.aisle('BCDDDCB', ' DDDDD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', 'BD###DB', '       ', '       ', '       ', 'BCCCCCB')
			.aisle('BCDDDCB', ' DDDDD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', 'BD###DB', '       ', '       ', '       ', 'BCCCCCB')
			.aisle('BCDDDCB', ' DDDDD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', ' DVVVD ', 'BD###DB', '       ', '       ', '       ', 'BCCCCCB')
			.aisle('ACCCCCA', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', ' DDDDD ', 'ADDDDDA', '       ', '       ', '       ', 'ACCCCCA')
			.aisle('AABBBAA', 'I     I', 'I     I', 'I     I', 'I     I', 'I     I', 'I     I', 'AABXBAA', 'I     I', 'I     I', 'I     I', 'AABBBAA')
			.where('X', Predicates.controller(Predicates.blocks(definition.get())))
			.where('A', Predicates.blocks('gtceu:stable_machine_casing'))
			.where('B', Predicates.blocks('gtceu:ev_machine_casing')
				.or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
				.or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.INPUT_ENERGY).setExactLimit(1))
				.or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setPreviewCount(1)))
			.where('I', Predicates.blocks('gtceu:titanium_frame'))
			.where('V', Predicates.blocks('malum:primordial_soup')
				.or(Predicates.blocks('malum:void_conduit').setPreviewCount(0)))
			.where('C', Predicates.blocks('malum:tainted_rock_bricks'))
			.where('D', Predicates.blocks('malum:weeping_well_bricks')
				.or(Predicates.blocks('malum:weeping_well_encasement_corner').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_central_encasement_support').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_encasement').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_side_pillar').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_central_pillar').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_central_encasement').setPreviewCount(0))
				.or(Predicates.blocks('malum:weeping_well_encasement_mirrored').setPreviewCount(0)))
			.where('#', Predicates.air())
			.where(' ', Predicates.any())
			.build()
		)
		.workableCasingModel(
			'gtceu:block/casings/gcym/atomic_casing',
			'gtceu:block/machines/fermenter')
	
}