let AlgaeMachine = (/** @type {Registry.Item} */ event) => {
	event.create('green_algae_farm', 'multiblock')
		.rotationState(RotationState.NON_Y_AXIS)
		.recipeType('green_algae_farm')
        //.recipeModifiers([GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
		.appearanceBlock(() => Block.getBlock('gtceu:clean_machine_casing'))
		.pattern(definition => FactoryBlockPattern.start()
			.aisle('AAAAAAAAA', 'BBBBBBBBB', 'BBBBBBBBB')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAXAAAA', 'BBBBBBBBB', 'BBBBBBBBB')
			.where('X', Predicates.controller(Predicates.blocks(definition.get())))
			.where('B', Predicates.blocks('kubejs:algae_farm_casing'))
			.where('A', Predicates.blocks('gtceu:clean_machine_casing')
				.or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
				.or(Predicates.abilities(PartAbility.INPUT_ENERGY).setPreviewCount(1)))
			.where('W', Predicates.blocks('minecraft:water'))
			.where('#', Predicates.blocks('tfc:plant/green_algae'))//.where('#', Predicates.air())
			.build()
		)
		.workableCasingModel(
			"gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
			"gtceu:block/multiblock/cracking_unit")
		
		
		event.create('red_algae_farm', 'multiblock')
		.rotationState(RotationState.NON_Y_AXIS)
		.recipeType('red_algae_farm')
        //.recipeModifiers([GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
		.appearanceBlock(() => Block.getBlock('gtceu:clean_machine_casing'))
		.pattern(definition => FactoryBlockPattern.start()
			.aisle('AAAAAAAAA', 'BBBBBBBBB', 'BBBBBBBBB')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAAAAAA', 'BWWWWWWWB', 'B#######B')
			.aisle('AAAAXAAAA', 'BBBBBBBBB', 'BBBBBBBBB')
			.where('X', Predicates.controller(Predicates.blocks(definition.get())))
			.where('B', Predicates.blocks('kubejs:corrosion_proof_algae_farm_casing'))
			.where('A', Predicates.blocks('gtceu:clean_machine_casing')
				.or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
				.or(Predicates.abilities(PartAbility.INPUT_ENERGY).setPreviewCount(1)))
			.where('W', Predicates.blocks('tfc:salt_water'))
			.where('#', Predicates.blocks('tfc:plant/red_algae'))//.where('#', Predicates.air())
			.build()
		)
		.workableCasingModel(
			"gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
			"gtceu:block/multiblock/cracking_unit")
	
}